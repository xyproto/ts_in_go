// Code generated by go-bindata.
// sources:
// gen/hello.js
// gen/hello.js.map
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _helloJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x2a\x2d\x4e\x55\x28\x2e\x29\xca\x4c\x2e\x51\xb2\xe6\x4a\xce\xcf\x2b\xce\xcf\x49\xd5\xcb\xc9\x4f\xd7\x50\xf2\x48\xcd\xc9\xc9\x57\x28\xcf\x2f\xca\x49\x51\x48\x2b\xca\xcf\x55\x08\xa9\x2c\x48\x0d\x4e\x2e\xca\x2c\x28\x51\x54\xd2\xb4\xe6\xd2\xd7\x57\x56\x28\xce\x2f\x2d\x4a\x4e\xf5\x4d\x2c\x28\xc8\xcc\x4b\x0f\x0d\xf2\xb1\xcd\x00\x69\xd2\xcb\x2a\xd6\xcb\x4d\x2c\x00\x04\x00\x00\xff\xff\x48\x96\x1d\x90\x5c\x00\x00\x00")

func helloJsBytes() ([]byte, error) {
	return bindataRead(
		_helloJs,
		"hello.js",
	)
}

func helloJs() (*asset, error) {
	bytes, err := helloJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hello.js", size: 92, mode: os.FileMode(416), modTime: time.Unix(1508151192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _helloJsMap = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\xb1\xca\xc2\x30\x14\xc5\xf1\x77\x39\xf3\x25\x1d\xbe\xa5\xe4\x9b\x4e\x33\x74\x2c\xb8\x4a\x87\x52\xa2\x46\xd2\xdc\x92\x5b\x5d\xc4\x77\x17\x0c\xb8\xfd\x0e\xe7\xff\xc2\x33\x56\x4b\x5a\xe0\xff\x04\x97\x94\x23\x3c\x6e\x31\x67\x75\x77\x83\xc0\xf4\x51\xd7\x78\x52\x3d\xe0\xf1\xdb\x06\x7f\x86\x73\x9d\xd5\xb5\x6b\xf1\x61\x98\x05\x65\xd9\xbe\xdf\x2c\xd8\x96\x7d\x4f\xe5\x6a\xf0\xf8\x27\x49\x99\xc8\x49\x02\x19\x64\x24\xc7\xa6\x7e\x20\xfb\xa1\x39\x90\xc4\xfb\x13\x00\x00\xff\xff\x22\x4f\x1c\xc9\x90\x00\x00\x00")

func helloJsMapBytes() ([]byte, error) {
	return bindataRead(
		_helloJsMap,
		"hello.js.map",
	)
}

func helloJsMap() (*asset, error) {
	bytes, err := helloJsMapBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hello.js.map", size: 144, mode: os.FileMode(416), modTime: time.Unix(1508151192, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hello.js": helloJs,
	"hello.js.map": helloJsMap,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"hello.js": &bintree{helloJs, map[string]*bintree{}},
	"hello.js.map": &bintree{helloJsMap, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

